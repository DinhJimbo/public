local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'
local plr = game.Players.LocalPlayer
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local Window = Library:CreateWindow({
    Title = 'Skid  Hub',
    Center = true, 
    AutoShow = true,
})
local Tabs = {
    Main = Window:AddTab('Main Farm'),
}
local vu = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:connect(function()
vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
wait(1)
vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)
function ToggleNoclip()
    if  Toggles.MyToggleFarmOres.Value or Toggles.MyToggleFarmChest.Value then
        return true 
    end
end
if syn then
    setfflag("HumanoidParallelRemoveNoPhysics", "False")
    setfflag("HumanoidParallelRemoveNoPhysicsNoSimulate2", "False")
    game:GetService('RunService').Stepped:connect(function()
        pcall(function()
            if  ToggleNoclip()  then
                if plr.Character:FindFirstChild("Humanoid") and plr.Character.Humanoid.Health ~= 0    then
                    plr.Character.Humanoid:ChangeState(11)
                end 
            end
        end)
    end)
else
    function CreateTweenFloat()
        if not plr.Character.HumanoidRootPart:FindFirstChild("EffectsSY") then
            local BV = Instance.new("BodyVelocity")
            BV.Parent = plr.Character.HumanoidRootPart
            BV.Name = "EffectsSY"
            BV.MaxForce = Vector3.new(0, 100000, 0)
            BV.Velocity = Vector3.new(0, 0, 0)
        end
    end
    local LocalPlayer = game:GetService("Players").LocalPlayer   
    local function getTorso(LocalPlayer)
        if LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            if LocalPlayer.Character:FindFirstChild('UpperTorso') then
                return LocalPlayer.Character.UpperTorso
            else
                return LocalPlayer.Character.Torso
            end
        end
    end    
    game:GetService("RunService").Stepped:Connect(function()
        if  ToggleNoclip() then
            if LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character:FindFirstChild("Humanoid") then
                getTorso(LocalPlayer).CanCollide = false
                LocalPlayer.Character.Head.CanCollide = false
                LocalPlayer.Character.HumanoidRootPart.CanCollide = false
                if LocalPlayer.Character.UpperTorso then
                    LocalPlayer.Character.LowerTorso.CanCollide = false
                end
            end
        end
    end)
    game:GetService('RunService').Stepped:connect(function()
        if  ToggleNoclip() then
            if plr.Character:FindFirstChild("Humanoid") and plr.Character.Humanoid.Health ~= 0 then
                spawn(function()
                    CreateTweenFloat()
                end)
            end
        end
        spawn(function()
            if not ToggleNoclip() then
                if plr.Character.HumanoidRootPart:FindFirstChild("EffectsSY") then
                    plr.Character.HumanoidRootPart.EffectsSY:Destroy()
                end
            end
        end)
    end)
end
local LeftGroupFarm = Tabs.Main:AddLeftGroupbox('Main')
local tableareas = {}
for i,v in next,game:GetService("ReplicatedStorage").CommonConfig.Mine:GetChildren() do 
    table.insert(tableareas,require(v).Name)
end

LeftGroupFarm:AddDropdown('MyDropdownSelectAreas', {
    Values = tableareas,
    Default = 0, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected
    Text = 'Select Areas',

})
LeftGroupFarm:AddDropdown('MyDropdownSelectChestFarm', {
    Values = {"I","II", "III","IV"},
    Default = 0, -- number index of the value / string
    Multi = true, -- true / false, allows multiple choices to be selected
    Text = 'Select Chest',

})
LeftGroupFarm:AddToggle('MyToggleFarmChest', {
    Text = 'Farm Chest',
    Default = false, -- Default value (true / false)
})
LeftGroupFarm:AddToggle('MyToggleSell', {
    Text = 'Auto Sell',
    Default = false, -- Default value (true / false)
})
function DetectNameArea()
    for i,v in next,game:GetService("ReplicatedStorage").CommonConfig.Mine:GetChildren() do 
        if Options.MyDropdownSelectAreas.Value == require(v).Name then 
            return string.split(v.Name,"CfgMineGeneral_")[2]
        end
    end
end
function DetectChest()
	for i,v in next,game:GetService("Workspace").Mine.Blocks[DetectNameArea()]:GetChildren() do 
		if string.find(v.Name, "Chest")   then
            local namechest = require(game.ReplicatedStorage.CommonConfig.CfgBlock).Blocks[require(game.ReplicatedStorage.CommonConfig.CfgBlock).BlockType[v.Name]].Name
            if Options.MyDropdownSelectChestFarm.Value[string.split(namechest,"Chest ")[2]] then 
                return v
            end
		end
	end
end
function DetectIdTelportisland()
    for i,v in next,game:GetService("ReplicatedStorage").CommonConfig.Harbor:GetChildren() do
        if DetectNameArea() == require(v).MineId then 
            return string.split(v.Name,"_")[2]
        end
    end
end
spawn(function()
	while wait() do 
		if Toggles.MyToggleFarmChest.Value then 
			pcall(function()
                if game:GetService("Workspace").Mine.Blocks[DetectNameArea()]:GetChildren()[1] then
                    local v = DetectChest()
                    repeat wait()
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
                        require(game:GetService("ReplicatedStorage").CommonLogic.Mine.MineSystem).ClientInspectBlock(v)
                        require(game:GetService("ReplicatedStorage").CommonLogic.PlayerDamage.ClickSystem).ClientCalculatePlayerDamage(v)
                        getrenv()._G.PathTool.MainRightBarView.UpdatePlayerDamage()
                    until not v or not v.Parent  or not Toggles.MyToggleFarmChest.Value
                else
                    local args = {
                        [1] = "TeleportToHarborSpawnLocationChannel",
                        [2] = tostring(DetectIdTelportisland())
                    }

                    game:GetService("ReplicatedStorage").CommonLibrary.Tool.RemoteManager.Funcs.DataPullFunc:InvokeServer(unpack(args))
                end
			end)
		end
	end
end)
spawn(function()
	while wait() do 
        pcall(function()
            if Toggles.MyToggleSell.Value then
                local v11 = getrenv()._G.PathTool.ClientPlayerManager.GetGamePlayer();
                local v14 = getrenv()._G.PathTool.MiningController.GetTargetBlockPart();
                local v15 = nil;
                local v16 = nil;
                if v14 then
                    local v17, v18 = getrenv()._G.PathTool.MineManagerClient.CheckPlayerMining(v11, v14);
                    v15 = v17;
                    v16 = v18;
                end;
                if not v15 and v16 then
                    if v16 == getrenv()._G.PathTool.LocalizeKey.TuKuaiBagFull then
                        local Area = string.split(DetectNameArea(),"_")[1]
                        getrenv()._G.PathTool.ViewUtil.DoRequest(getrenv()._G.PathTool.TeleportSystem.ClientTeleportToLastHarborShop)
                        require(game:GetService("ReplicatedStorage").CommonLogic.TuKuai.TuKuaiSystem).SellTuKuaiChannel:DoRequest(Area,DetectIdTelportisland())
                    end;
                end;
            end
        end)
	end
end)
local RightGroupFarmOres = Tabs.Main:AddRightGroupbox('Farm Ores')
local tableores = {}
for i,v in next,require(game:GetService("ReplicatedStorage").CommonConfig.ResourceConfig).ValueTypes do
    if string.find(i,"Ore") or v.Name == "Gem" then
        table.insert(tableores,v.Name)
    end
end

RightGroupFarmOres:AddDropdown('MyDropdownSelectOres', {
    Values = tableores,
    Default = 0, -- number index of the value / string
    Multi = true, -- true / false, allows multiple choices to be selected
    Text = 'Select Ores',

})
RightGroupFarmOres:AddToggle('MyToggleFarmOres', {
    Text = 'Farm Ores',
    Default = false, -- Default value (true / false)
})
function DetectOres()
	for i,v in next,game:GetService("Workspace").Mine.Blocks[DetectNameArea()]:GetChildren() do 
		if Options.MyDropdownSelectOres.Value[string.gsub(v.Name,"%d_%d","")]  then
            return v
		end
	end
end
spawn(function()
	while wait() do 
		if Toggles.MyToggleFarmOres.Value then 
			pcall(function()
                if game:GetService("Workspace").Mine.Blocks[DetectNameArea()]:GetChildren()[1] then
                    local v = DetectOres()
                    repeat wait()
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame
                        require(game:GetService("ReplicatedStorage").CommonLogic.Mine.MineSystem).ClientInspectBlock(v)
                        require(game:GetService("ReplicatedStorage").CommonLogic.PlayerDamage.ClickSystem).ClientCalculatePlayerDamage(v)
                        getrenv()._G.PathTool.MainRightBarView.UpdatePlayerDamage()
                    until not v or not v.Parent  or not Toggles.MyToggleFarmOres.Value
                else
                    local args = {
                        [1] = "TeleportToHarborSpawnLocationChannel",
                        [2] = tostring(DetectIdTelportisland())
                    }
                    game:GetService("ReplicatedStorage").CommonLibrary.Tool.RemoteManager.Funcs.DataPullFunc:InvokeServer(unpack(args))
                end
			end)
		end
	end
end)
